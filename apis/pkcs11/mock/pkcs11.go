// Code generated by MockGen. DO NOT EDIT.
// Source: pkcs11.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pkcs11 "github.com/cryptogarageinc/cloudhsm/v4/apis/pkcs11"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudHSMPkcs11 is a mock of CloudHSMPkcs11 interface.
type MockCloudHSMPkcs11 struct {
	ctrl     *gomock.Controller
	recorder *MockCloudHSMPkcs11MockRecorder
}

// MockCloudHSMPkcs11MockRecorder is the mock recorder for MockCloudHSMPkcs11.
type MockCloudHSMPkcs11MockRecorder struct {
	mock *MockCloudHSMPkcs11
}

// NewMockCloudHSMPkcs11 creates a new mock instance.
func NewMockCloudHSMPkcs11(ctrl *gomock.Controller) *MockCloudHSMPkcs11 {
	mock := &MockCloudHSMPkcs11{ctrl: ctrl}
	mock.recorder = &MockCloudHSMPkcs11MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudHSMPkcs11) EXPECT() *MockCloudHSMPkcs11MockRecorder {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockCloudHSMPkcs11) CloseSession(session uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSession", session)
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockCloudHSMPkcs11MockRecorder) CloseSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).CloseSession), session)
}

// Finalize mocks base method.
func (m *MockCloudHSMPkcs11) Finalize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize")
}

// Finalize indicates an expected call of Finalize.
func (mr *MockCloudHSMPkcs11MockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).Finalize))
}

// FinalizeAndCloseSession mocks base method.
func (m *MockCloudHSMPkcs11) FinalizeAndCloseSession(session uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinalizeAndCloseSession", session)
}

// FinalizeAndCloseSession indicates an expected call of FinalizeAndCloseSession.
func (mr *MockCloudHSMPkcs11MockRecorder) FinalizeAndCloseSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeAndCloseSession", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).FinalizeAndCloseSession), session)
}

// GenerateKeyPair mocks base method.
func (m *MockCloudHSMPkcs11) GenerateKeyPair(ctx context.Context, sessionHandle uint64, namedCurveOid []byte, pubkeyLabel, privkeyLabel string) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyPair", ctx, sessionHandle, namedCurveOid, pubkeyLabel, privkeyLabel)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair.
func (mr *MockCloudHSMPkcs11MockRecorder) GenerateKeyPair(ctx, sessionHandle, namedCurveOid, pubkeyLabel, privkeyLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).GenerateKeyPair), ctx, sessionHandle, namedCurveOid, pubkeyLabel, privkeyLabel)
}

// GenerateSignature mocks base method.
func (m *MockCloudHSMPkcs11) GenerateSignature(ctx context.Context, sessionHandle, privkey, mechType uint64, data []byte) ([64]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignature", ctx, sessionHandle, privkey, mechType, data)
	ret0, _ := ret[0].([64]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSignature indicates an expected call of GenerateSignature.
func (mr *MockCloudHSMPkcs11MockRecorder) GenerateSignature(ctx, sessionHandle, privkey, mechType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignature", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).GenerateSignature), ctx, sessionHandle, privkey, mechType, data)
}

// GenerateSignatureWithLabel mocks base method.
func (m *MockCloudHSMPkcs11) GenerateSignatureWithLabel(ctx context.Context, sessionHandle uint64, privkeyLabel string, mechType uint64, data []byte) ([64]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignatureWithLabel", ctx, sessionHandle, privkeyLabel, mechType, data)
	ret0, _ := ret[0].([64]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSignatureWithLabel indicates an expected call of GenerateSignatureWithLabel.
func (mr *MockCloudHSMPkcs11MockRecorder) GenerateSignatureWithLabel(ctx, sessionHandle, privkeyLabel, mechType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignatureWithLabel", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).GenerateSignatureWithLabel), ctx, sessionHandle, privkeyLabel, mechType, data)
}

// GetPubkey mocks base method.
func (m *MockCloudHSMPkcs11) GetPubkey(ctx context.Context, sessionHandle, pubkey uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubkey", ctx, sessionHandle, pubkey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubkey indicates an expected call of GetPubkey.
func (mr *MockCloudHSMPkcs11MockRecorder) GetPubkey(ctx, sessionHandle, pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubkey", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).GetPubkey), ctx, sessionHandle, pubkey)
}

// GetPubkeyWithLabel mocks base method.
func (m *MockCloudHSMPkcs11) GetPubkeyWithLabel(ctx context.Context, sessionHandle uint64, pubkeyLabel string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubkeyWithLabel", ctx, sessionHandle, pubkeyLabel)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubkeyWithLabel indicates an expected call of GetPubkeyWithLabel.
func (mr *MockCloudHSMPkcs11MockRecorder) GetPubkeyWithLabel(ctx, sessionHandle, pubkeyLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubkeyWithLabel", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).GetPubkeyWithLabel), ctx, sessionHandle, pubkeyLabel)
}

// GetSessionInfo mocks base method.
func (m *MockCloudHSMPkcs11) GetSessionInfo(session uint64) (*pkcs11.SessionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionInfo", session)
	ret0, _ := ret[0].(*pkcs11.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionInfo indicates an expected call of GetSessionInfo.
func (mr *MockCloudHSMPkcs11MockRecorder) GetSessionInfo(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionInfo", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).GetSessionInfo), session)
}

// Initialize mocks base method.
func (m *MockCloudHSMPkcs11) Initialize(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockCloudHSMPkcs11MockRecorder) Initialize(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).Initialize), ctx, path)
}

// OpenSession mocks base method.
func (m *MockCloudHSMPkcs11) OpenSession(ctx context.Context, pin string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, pin)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockCloudHSMPkcs11MockRecorder) OpenSession(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).OpenSession), ctx, pin)
}

// VerifySignature mocks base method.
func (m *MockCloudHSMPkcs11) VerifySignature(ctx context.Context, sessionHandle, pubkey, mechType uint64, data, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignature", ctx, sessionHandle, pubkey, mechType, data, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySignature indicates an expected call of VerifySignature.
func (mr *MockCloudHSMPkcs11MockRecorder) VerifySignature(ctx, sessionHandle, pubkey, mechType, data, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignature", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).VerifySignature), ctx, sessionHandle, pubkey, mechType, data, signature)
}

// VerifySignatureWithLabel mocks base method.
func (m *MockCloudHSMPkcs11) VerifySignatureWithLabel(ctx context.Context, sessionHandle uint64, pubkeyLabel string, mechType uint64, data, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignatureWithLabel", ctx, sessionHandle, pubkeyLabel, mechType, data, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySignatureWithLabel indicates an expected call of VerifySignatureWithLabel.
func (mr *MockCloudHSMPkcs11MockRecorder) VerifySignatureWithLabel(ctx, sessionHandle, pubkeyLabel, mechType, data, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignatureWithLabel", reflect.TypeOf((*MockCloudHSMPkcs11)(nil).VerifySignatureWithLabel), ctx, sessionHandle, pubkeyLabel, mechType, data, signature)
}
