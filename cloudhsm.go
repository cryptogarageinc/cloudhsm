/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swig.i

package cloudhsm

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#cgo CPPFLAGS: -I${SRCDIR}/include/pkcs11/v2.40
#cgo LDFLAGS: -L${SRCDIR}/build/Release -L/usr/local/lib -L/usr/local/lib64 -lcloudhsmpkcs11util -ldl

typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef _gostring_ swig_type_3;
typedef _gostring_ swig_type_4;
typedef _gostring_ swig_type_5;
typedef _gostring_ swig_type_6;
typedef long long swig_type_7;
typedef _gostring_ swig_type_8;
typedef long long swig_type_9;
extern void _wrap_Swig_free_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_cloudhsm_5f0f0e970e269e9f(swig_intgo arg1);
extern void _wrap_funcs_set_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern uintptr_t _wrap_funcs_get_cloudhsm_5f0f0e970e269e9f(void);
extern void _wrap_true_val_set_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern uintptr_t _wrap_true_val_get_cloudhsm_5f0f0e970e269e9f(void);
extern void _wrap_false_val_set_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern uintptr_t _wrap_false_val_get_cloudhsm_5f0f0e970e269e9f(void);
extern uintptr_t _wrap_pkcs11_initialize_cloudhsm_5f0f0e970e269e9f(swig_type_1 arg1);
extern uintptr_t _wrap_pkcs11_open_session_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_pkcs11_get_slot_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern void _wrap_pkcs11_finalize_session_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern void _wrap_pkcs_arguments_pin_set_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1, swig_type_2 arg2);
extern swig_type_3 _wrap_pkcs_arguments_pin_get_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern void _wrap_pkcs_arguments_library_set_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1, swig_type_4 arg2);
extern swig_type_5 _wrap_pkcs_arguments_library_get_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern uintptr_t _wrap_new_pkcs_arguments_cloudhsm_5f0f0e970e269e9f(void);
extern void _wrap_delete_pkcs_arguments_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1);
extern swig_intgo _wrap_get_pkcs_args_cloudhsm_5f0f0e970e269e9f(swig_intgo arg1, swig_voidp arg2, uintptr_t arg3);
extern swig_intgo _wrap_bytes_to_new_hexstring_cloudhsm_5f0f0e970e269e9f(swig_type_6 arg1, swig_type_7 arg2, swig_voidp arg3);
extern swig_intgo _wrap_print_bytes_as_hex_cloudhsm_5f0f0e970e269e9f(swig_type_8 arg1, swig_type_9 arg2);
extern uintptr_t _wrap_generate_signature_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7);
extern uintptr_t _wrap_verify_signature_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7);
extern uintptr_t _wrap_get_ec_pubkey_cloudhsm_5f0f0e970e269e9f(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"
import "fmt"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_cloudhsm_5f0f0e970e269e9f(C.swig_intgo(_swig_i_0)))
	return swig_r
}

const MAX_SIGNATURE_LENGTH int = 256
func SetFuncs(arg1 CK_FUNCTION_LIST) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_funcs_set_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
}

func GetFuncs() (_swig_ret CK_FUNCTION_LIST) {
	var swig_r CK_FUNCTION_LIST
	swig_r = (CK_FUNCTION_LIST)(SwigcptrCK_FUNCTION_LIST(C._wrap_funcs_get_cloudhsm_5f0f0e970e269e9f()))
	return swig_r
}

func SetTrue_val(arg1 CK_BBOOL) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_true_val_set_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
}

func GetTrue_val() (_swig_ret CK_BBOOL) {
	var swig_r CK_BBOOL
	swig_r = (CK_BBOOL)(SwigcptrCK_BBOOL(C._wrap_true_val_get_cloudhsm_5f0f0e970e269e9f()))
	return swig_r
}

func SetFalse_val(arg1 CK_BBOOL) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_false_val_set_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
}

func GetFalse_val() (_swig_ret CK_BBOOL) {
	var swig_r CK_BBOOL
	swig_r = (CK_BBOOL)(SwigcptrCK_BBOOL(C._wrap_false_val_get_cloudhsm_5f0f0e970e269e9f()))
	return swig_r
}

func Pkcs11_initialize(arg1 string) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_initialize_cloudhsm_5f0f0e970e269e9f(*(*C.swig_type_1)(unsafe.Pointer(&_swig_i_0)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Pkcs11_open_session(arg1 CK_UTF8CHAR_PTR, arg2 CK_SESSION_HANDLE_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_open_session_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))))
	return swig_r
}

func Pkcs11_get_slot(arg1 CK_SLOT_ID) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_get_slot_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func Pkcs11_finalize_session(arg1 CK_SESSION_HANDLE) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_pkcs11_finalize_session_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
}

type SwigcptrPkcs_arguments uintptr

func (p SwigcptrPkcs_arguments) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPkcs_arguments) SwigIsPkcs_arguments() {
}

func (arg1 SwigcptrPkcs_arguments) SetPin(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_pkcs_arguments_pin_set_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrPkcs_arguments) GetPin() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_pkcs_arguments_pin_get_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (arg1 SwigcptrPkcs_arguments) SetLibrary(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_pkcs_arguments_library_set_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0), *(*C.swig_type_4)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrPkcs_arguments) GetLibrary() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_pkcs_arguments_library_get_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func NewPkcs_arguments() (_swig_ret Pkcs_arguments) {
	var swig_r Pkcs_arguments
	swig_r = (Pkcs_arguments)(SwigcptrPkcs_arguments(C._wrap_new_pkcs_arguments_cloudhsm_5f0f0e970e269e9f()))
	return swig_r
}

func DeletePkcs_arguments(arg1 Pkcs_arguments) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_pkcs_arguments_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0))
}

type Pkcs_arguments interface {
	Swigcptr() uintptr
	SwigIsPkcs_arguments()
	SetPin(arg2 string)
	GetPin() (_swig_ret string)
	SetLibrary(arg2 string)
	GetLibrary() (_swig_ret string)
}

func Get_pkcs_args(arg1 int, arg2 *string, arg3 Pkcs_arguments) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_get_pkcs_args_cloudhsm_5f0f0e970e269e9f(C.swig_intgo(_swig_i_0), C.swig_voidp(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Bytes_to_new_hexstring(arg1 string, arg2 int64, arg3 **byte) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_bytes_to_new_hexstring_cloudhsm_5f0f0e970e269e9f(*(*C.swig_type_6)(unsafe.Pointer(&_swig_i_0)), C.swig_type_7(_swig_i_1), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Print_bytes_as_hex(arg1 string, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_print_bytes_as_hex_cloudhsm_5f0f0e970e269e9f(*(*C.swig_type_8)(unsafe.Pointer(&_swig_i_0)), C.swig_type_9(_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Generate_signature(arg1 CK_SESSION_HANDLE, arg2 CK_OBJECT_HANDLE, arg3 CK_MECHANISM_TYPE, arg4 CK_BYTE_PTR, arg5 CK_ULONG, arg6 CK_BYTE_PTR, arg7 CK_ULONG_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_generate_signature_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6))))
	return swig_r
}

func Verify_signature(arg1 CK_SESSION_HANDLE, arg2 CK_OBJECT_HANDLE, arg3 CK_MECHANISM_TYPE, arg4 CK_BYTE_PTR, arg5 CK_ULONG, arg6 CK_BYTE_PTR, arg7 CK_ULONG) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_verify_signature_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6))))
	return swig_r
}

func Get_ec_pubkey(arg1 CK_SESSION_HANDLE, arg2 CK_OBJECT_HANDLE, arg3 CK_BYTE_PTR, arg4 CK_ULONG_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_get_ec_pubkey_cloudhsm_5f0f0e970e269e9f(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3))))
	return swig_r
}



const CKR_CANCEL = 0x00000001
const CKR_HOST_MEMORY = 0x00000002
const CKR_SLOT_ID_INVALID = 0x00000003

const CKR_GENERAL_ERROR = 0x00000005
const CKR_FUNCTION_FAILED = 0x00000006

const CKR_ARGUMENTS_BAD = 0x00000007
const CKR_NO_EVENT = 0x00000008
const CKR_NEED_TO_CREATE_THREADS = 0x00000009
const CKR_CANT_LOCK = 0x0000000A

const CKR_ATTRIBUTE_READ_ONLY = 0x00000010
const CKR_ATTRIBUTE_SENSITIVE = 0x00000011
const CKR_ATTRIBUTE_TYPE_INVALID = 0x00000012
const CKR_ATTRIBUTE_VALUE_INVALID = 0x00000013

const CKR_ACTION_PROHIBITED = 0x0000001B

const CKR_DATA_INVALID = 0x00000020
const CKR_DATA_LEN_RANGE = 0x00000021
const CKR_DEVICE_ERROR = 0x00000030
const CKR_DEVICE_MEMORY = 0x00000031
const CKR_DEVICE_REMOVED = 0x00000032
const CKR_ENCRYPTED_DATA_INVALID = 0x00000040
const CKR_ENCRYPTED_DATA_LEN_RANGE = 0x00000041
const CKR_FUNCTION_CANCELED = 0x00000050
const CKR_FUNCTION_NOT_PARALLEL = 0x00000051

const CKR_FUNCTION_NOT_SUPPORTED = 0x00000054

const CKR_KEY_HANDLE_INVALID = 0x00000060

const CKR_KEY_SIZE_RANGE = 0x00000062
const CKR_KEY_TYPE_INCONSISTENT = 0x00000063

const CKR_KEY_NOT_NEEDED = 0x00000064
const CKR_KEY_CHANGED = 0x00000065
const CKR_KEY_NEEDED = 0x00000066
const CKR_KEY_INDIGESTIBLE = 0x00000067
const CKR_KEY_FUNCTION_NOT_PERMITTED = 0x00000068
const CKR_KEY_NOT_WRAPPABLE = 0x00000069
const CKR_KEY_UNEXTRACTABLE = 0x0000006A

const CKR_MECHANISM_INVALID = 0x00000070
const CKR_MECHANISM_PARAM_INVALID = 0x00000071

const CKR_OBJECT_HANDLE_INVALID = 0x00000082
const CKR_OPERATION_ACTIVE = 0x00000090
const CKR_OPERATION_NOT_INITIALIZED = 0x00000091
const CKR_PIN_INCORRECT = 0x000000A0
const CKR_PIN_INVALID = 0x000000A1
const CKR_PIN_LEN_RANGE = 0x000000A2

const CKR_PIN_EXPIRED = 0x000000A3
const CKR_PIN_LOCKED = 0x000000A4

const CKR_SESSION_CLOSED = 0x000000B0
const CKR_SESSION_COUNT = 0x000000B1
const CKR_SESSION_HANDLE_INVALID = 0x000000B3
const CKR_SESSION_PARALLEL_NOT_SUPPORTED = 0x000000B4
const CKR_SESSION_READ_ONLY = 0x000000B5
const CKR_SESSION_EXISTS = 0x000000B6

const CKR_SESSION_READ_ONLY_EXISTS = 0x000000B7
const CKR_SESSION_READ_WRITE_SO_EXISTS = 0x000000B8

const CKR_SIGNATURE_INVALID = 0x000000C0
const CKR_SIGNATURE_LEN_RANGE = 0x000000C1
const CKR_TEMPLATE_INCOMPLETE = 0x000000D0
const CKR_TEMPLATE_INCONSISTENT = 0x000000D1
const CKR_TOKEN_NOT_PRESENT = 0x000000E0
const CKR_TOKEN_NOT_RECOGNIZED = 0x000000E1
const CKR_TOKEN_WRITE_PROTECTED = 0x000000E2
const CKR_UNWRAPPING_KEY_HANDLE_INVALID = 0x000000F0
const CKR_UNWRAPPING_KEY_SIZE_RANGE = 0x000000F1
const CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT = 0x000000F2
const CKR_USER_ALREADY_LOGGED_IN = 0x00000100
const CKR_USER_NOT_LOGGED_IN = 0x00000101
const CKR_USER_PIN_NOT_INITIALIZED = 0x00000102
const CKR_USER_TYPE_INVALID = 0x00000103

const CKR_USER_ANOTHER_ALREADY_LOGGED_IN = 0x00000104
const CKR_USER_TOO_MANY_TYPES = 0x00000105

const CKR_WRAPPED_KEY_INVALID = 0x00000110
const CKR_WRAPPED_KEY_LEN_RANGE = 0x00000112
const CKR_WRAPPING_KEY_HANDLE_INVALID = 0x00000113
const CKR_WRAPPING_KEY_SIZE_RANGE = 0x00000114
const CKR_WRAPPING_KEY_TYPE_INCONSISTENT = 0x00000115
const CKR_RANDOM_SEED_NOT_SUPPORTED = 0x00000120

const CKR_RANDOM_NO_RNG = 0x00000121

const CKR_DOMAIN_PARAMS_INVALID = 0x00000130

const CKR_CURVE_NOT_SUPPORTED = 0x00000140

const CKR_BUFFER_TOO_SMALL = 0x00000150
const CKR_SAVED_STATE_INVALID = 0x00000160
const CKR_INFORMATION_SENSITIVE = 0x00000170
const CKR_STATE_UNSAVEABLE = 0x00000180

const CKR_CRYPTOKI_NOT_INITIALIZED = 0x00000190
const CKR_CRYPTOKI_ALREADY_INITIALIZED = 0x00000191
const CKR_MUTEX_BAD = 0x000001A0
const CKR_MUTEX_NOT_LOCKED = 0x000001A1

const CKR_NEW_PIN_MODE = 0x000001B0
const CKR_NEXT_OTP = 0x000001B1

const CKR_EXCEEDED_MAX_ITERATIONS = 0x000001B5
const CKR_FIPS_SELF_TEST_FAILED = 0x000001B6
const CKR_LIBRARY_LOAD_FAILED = 0x000001B7
const CKR_PIN_TOO_WEAK = 0x000001B8
const CKR_PUBLIC_KEY_INVALID = 0x000001B9

const CKR_FUNCTION_REJECTED = 0x00000200

const CKR_VENDOR_DEFINED = 0x80000000

func convertRVtoByte(rv CK_RV) (err error) {
	retCode := *(*uint64)(unsafe.Pointer(rv.Swigcptr()))
	if retCode == uint64(0) {
		return nil
	} else {
		err = fmt.Errorf("cloudhsm Error: errorCode=[%#x]", retCode)
	}
	return
}

func Pkcs11Initialize(path string) (err error) {
	rv := Pkcs11_initialize(path)
	err = convertRVtoByte(rv)
	return
}

func Pkcs11OpenSession(pin string) (sessionHandler uint64, err error) {
	pinPtr := SwigcptrCK_UTF8CHAR_PTR(uintptr(unsafe.Pointer(&pin)))
	session := uint64(0)
	sessionHandlePtr := SwigcptrCK_SESSION_HANDLE(uintptr(unsafe.Pointer(&session)))
	sessionPtr := SwigcptrCK_SESSION_HANDLE_PTR(uintptr(unsafe.Pointer(&sessionHandlePtr)))

	rv := Pkcs11_open_session(pinPtr, sessionPtr)
	err = convertRVtoByte(rv)
	if err == nil {
		sessionHandler = session
	}
	return
}

func Pkcs11FinalizeSession(session uint64) {
	if session == uint64(0) {
		// for disable Go-Compiler optimization
		sessionObj := SwigcptrCK_SESSION_HANDLE(uintptr(unsafe.Pointer(&session)))
		Pkcs11_finalize_session(sessionObj)
	} else {
		sessionObj := SwigcptrCK_SESSION_HANDLE(uintptr(unsafe.Pointer(&session)))
		Pkcs11_finalize_session(sessionObj)
	}
	return
}

func GenerateSignature(sessionHandle uint64, privkey uint64, mechType uint64, data []byte) (signature [64]byte, err error) {
	sessionHandleObj := SwigcptrCK_SESSION_HANDLE(uintptr(unsafe.Pointer(&sessionHandle)))
	privkeyObj := SwigcptrCK_OBJECT_HANDLE(uintptr(unsafe.Pointer(&privkey)))
	mechTypeObj := SwigcptrCK_MECHANISM_TYPE(uintptr(unsafe.Pointer(&mechType)))

	dataPtr := uintptr(unsafe.Pointer(&data[0]))
	dataObj := SwigcptrCK_BYTE_PTR(uintptr(unsafe.Pointer(&dataPtr)))

	dataLen := uint64(len(data))
	dataLenObj := SwigcptrCK_ULONG(unsafe.Pointer(&dataLen))

	sigPtr := uintptr(unsafe.Pointer(&signature[0]))
	sigObj := SwigcptrCK_BYTE_PTR(uintptr(unsafe.Pointer(&sigPtr)))

	// 64 bytes signature
	written := uint64(64)
	sigLen := uintptr(unsafe.Pointer(&written))
	sigLenPtrObj := SwigcptrCK_ULONG_PTR(uintptr(unsafe.Pointer(&sigLen)))

	rv := Generate_signature(
		sessionHandleObj,
		privkeyObj,
		mechTypeObj,
		dataObj,
		dataLenObj,
		sigObj,
		sigLenPtrObj)

	err = convertRVtoByte(rv)
	return
}

func VerifySignature(sessionHandle uint64, pubkey uint64, mechType uint64, data []byte, signature []byte) (err error) {
	sessionHandleObj := SwigcptrCK_SESSION_HANDLE(uintptr(unsafe.Pointer(&sessionHandle)))
	pubkeyObj := SwigcptrCK_OBJECT_HANDLE(uintptr(unsafe.Pointer(&pubkey)))
	mechTypeObj := SwigcptrCK_MECHANISM_TYPE(uintptr(unsafe.Pointer(&mechType)))

	dataPtr := uintptr(unsafe.Pointer(&data[0]))
	dataObj := SwigcptrCK_BYTE_PTR(uintptr(unsafe.Pointer(&dataPtr)))

	dataLen := uint64(len(data))
	dataLenObj := SwigcptrCK_ULONG(uintptr(unsafe.Pointer(&dataLen)))

	sigPtr := uintptr(unsafe.Pointer(&signature[0]))
	sigObj := SwigcptrCK_BYTE_PTR(uintptr(unsafe.Pointer(&sigPtr)))

	sigLen := uint64(len(signature))
	sigLenObj := SwigcptrCK_ULONG(uintptr(unsafe.Pointer(&sigLen)))

	rv := Verify_signature(
		sessionHandleObj,
		pubkeyObj,
		mechTypeObj,
		dataObj,
		dataLenObj,
		sigObj,
		sigLenObj)
	err = convertRVtoByte(rv)
	return
}

func GetPubkey(sessionHandle uint64, pubkey uint64) (pubkeyBytes []byte, err error) {
	sessionHandleObj := SwigcptrCK_SESSION_HANDLE(uintptr(unsafe.Pointer(&sessionHandle)))
	pubkeyObj := SwigcptrCK_OBJECT_HANDLE(uintptr(unsafe.Pointer(&pubkey)))

	var data [256]byte
	dataPtr := uintptr(unsafe.Pointer(&data[0]))
	dataObj := SwigcptrCK_BYTE_PTR(uintptr(unsafe.Pointer(&dataPtr)))

	written := uint64(256)
	dataLen := uintptr(unsafe.Pointer(&written))
	dataLenPtrObj := SwigcptrCK_ULONG_PTR(uintptr(unsafe.Pointer(&dataLen)))

	rv := Get_ec_pubkey(
		sessionHandleObj,
		pubkeyObj,
		dataObj,
		dataLenPtrObj)

	err = convertRVtoByte(rv)
	if err == nil {
		pubkeyBytes = data[:written]
	}
	return
}


type SwigcptrCK_SESSION_HANDLE_PTR uintptr
type CK_SESSION_HANDLE_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_SESSION_HANDLE_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_MECHANISM_TYPE uintptr
type CK_MECHANISM_TYPE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_MECHANISM_TYPE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_RV uintptr
type CK_RV interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_RV) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_UTF8CHAR_PTR uintptr
type CK_UTF8CHAR_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_UTF8CHAR_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_SLOT_ID uintptr
type CK_SLOT_ID interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_SLOT_ID) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_BBOOL uintptr
type CK_BBOOL interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_BBOOL) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_SESSION_HANDLE uintptr
type CK_SESSION_HANDLE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_SESSION_HANDLE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_OBJECT_HANDLE uintptr
type CK_OBJECT_HANDLE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_OBJECT_HANDLE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_BYTE_PTR uintptr
type CK_BYTE_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_BYTE_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_ULONG uintptr
type CK_ULONG interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_ULONG) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_FUNCTION_LIST uintptr
type CK_FUNCTION_LIST interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_FUNCTION_LIST) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_ULONG_PTR uintptr
type CK_ULONG_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_ULONG_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

