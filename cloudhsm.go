/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swig.i

package cloudhsm

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#cgo CPPFLAGS: -I${SRCDIR}/include/pkcs11/v2.40
#cgo LDFLAGS: -L${SRCDIR}/build/Release -L/usr/local/lib -L/usr/local/lib64 -lcloudhsmpkcs11util -ldl

typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef long long swig_type_3;
extern void _wrap_Swig_free_cloudhsm_ef3f3870b99405a1(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_cloudhsm_ef3f3870b99405a1(swig_intgo arg1);
extern uintptr_t _wrap_pkcs11_initialize_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, swig_type_1 arg2);
extern uintptr_t _wrap_pkcs11_open_session_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern uintptr_t _wrap_pkcs11_get_session_info_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5);
extern void _wrap_pkcs11_finalize_session_cloudhsm_ef3f3870b99405a1(uintptr_t arg1);
extern void _wrap_pkcs11_close_session_cloudhsm_ef3f3870b99405a1(uintptr_t arg1);
extern void _wrap_pkcs11_finalize_cloudhsm_ef3f3870b99405a1(void);
extern swig_intgo _wrap_bytes_to_new_hexstring_cloudhsm_ef3f3870b99405a1(swig_type_2 arg1, swig_type_3 arg2, swig_voidp arg3);
extern uintptr_t _wrap_pkcs11_create_context_cloudhsm_ef3f3870b99405a1(swig_voidp arg1);
extern void _wrap_pkcs11_free_context_cloudhsm_ef3f3870b99405a1(uintptr_t arg1);
extern uintptr_t _wrap_pkcs11_get_last_error_message_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, swig_voidp arg2);
extern uintptr_t _wrap_pkcs11_get_last_message_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, swig_voidp arg2);
extern uintptr_t _wrap_generate_signature_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8);
extern uintptr_t _wrap_verify_signature_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8);
extern uintptr_t _wrap_generate_ec_keypair_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, uintptr_t arg6);
extern uintptr_t _wrap_get_ec_pubkey_cloudhsm_ef3f3870b99405a1(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_cloudhsm_ef3f3870b99405a1(C.swig_intgo(_swig_i_0)))
	return swig_r
}

func Pkcs11_initialize(arg1 uintptr, arg2 string) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_initialize_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Pkcs11_open_session(arg1 uintptr, arg2 CK_UTF8CHAR_PTR, arg3 CK_SESSION_HANDLE_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_open_session_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2))))
	return swig_r
}

func Pkcs11_get_session_info(arg1 CK_SESSION_HANDLE, arg2 CK_ULONG, arg3 CK_ULONG, arg4 CK_ULONG, arg5 CK_ULONG) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_get_session_info_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4))))
	return swig_r
}

func Pkcs11_finalize_session(arg1 CK_SESSION_HANDLE) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_pkcs11_finalize_session_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0))
}

func Pkcs11_close_session(arg1 CK_SESSION_HANDLE) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_pkcs11_close_session_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0))
}

func Pkcs11_finalize() {
	C._wrap_pkcs11_finalize_cloudhsm_ef3f3870b99405a1()
}

func Bytes_to_new_hexstring(arg1 string, arg2 int64, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_bytes_to_new_hexstring_cloudhsm_ef3f3870b99405a1(*(*C.swig_type_2)(unsafe.Pointer(&_swig_i_0)), C.swig_type_3(_swig_i_1), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Pkcs11_create_context(arg1 *uintptr) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_create_context_cloudhsm_ef3f3870b99405a1(C.swig_voidp(_swig_i_0))))
	return swig_r
}

func Pkcs11_free_context(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_pkcs11_free_context_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0))
}

func Pkcs11_get_last_error_message(arg1 uintptr, arg2 *string) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_get_last_error_message_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))))
	return swig_r
}

func Pkcs11_get_last_message(arg1 uintptr, arg2 *string) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_pkcs11_get_last_message_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))))
	return swig_r
}

const MAX_PUBKEY_LENGTH int = 256
const MAX_SIGNATURE_LENGTH int = 256
func Generate_signature(arg1 uintptr, arg2 CK_SESSION_HANDLE, arg3 CK_OBJECT_HANDLE, arg4 CK_MECHANISM_TYPE, arg5 CK_BYTE_PTR, arg6 CK_ULONG, arg7 CK_BYTE_PTR, arg8 CK_ULONG_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_generate_signature_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7))))
	return swig_r
}

func Verify_signature(arg1 uintptr, arg2 CK_SESSION_HANDLE, arg3 CK_OBJECT_HANDLE, arg4 CK_MECHANISM_TYPE, arg5 CK_BYTE_PTR, arg6 CK_ULONG, arg7 CK_BYTE_PTR, arg8 CK_ULONG) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_verify_signature_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7))))
	return swig_r
}

func Generate_ec_keypair(arg1 uintptr, arg2 CK_SESSION_HANDLE, arg3 CK_BYTE_PTR, arg4 CK_ULONG, arg5 CK_OBJECT_HANDLE_PTR, arg6 CK_OBJECT_HANDLE_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_generate_ec_keypair_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5))))
	return swig_r
}

func Get_ec_pubkey(arg1 uintptr, arg2 CK_SESSION_HANDLE, arg3 CK_OBJECT_HANDLE, arg4 CK_BYTE_PTR, arg5 CK_ULONG_PTR) (_swig_ret CK_RV) {
	var swig_r CK_RV
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (CK_RV)(SwigcptrCK_RV(C._wrap_get_ec_pubkey_cloudhsm_ef3f3870b99405a1(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4))))
	return swig_r
}



const CKR_CANCEL = 0x00000001
const CKR_HOST_MEMORY = 0x00000002
const CKR_SLOT_ID_INVALID = 0x00000003

const CKR_GENERAL_ERROR = 0x00000005
const CKR_FUNCTION_FAILED = 0x00000006

const CKR_ARGUMENTS_BAD = 0x00000007
const CKR_NO_EVENT = 0x00000008
const CKR_NEED_TO_CREATE_THREADS = 0x00000009
const CKR_CANT_LOCK = 0x0000000A

const CKR_ATTRIBUTE_READ_ONLY = 0x00000010
const CKR_ATTRIBUTE_SENSITIVE = 0x00000011
const CKR_ATTRIBUTE_TYPE_INVALID = 0x00000012
const CKR_ATTRIBUTE_VALUE_INVALID = 0x00000013

const CKR_ACTION_PROHIBITED = 0x0000001B

const CKR_DATA_INVALID = 0x00000020
const CKR_DATA_LEN_RANGE = 0x00000021
const CKR_DEVICE_ERROR = 0x00000030
const CKR_DEVICE_MEMORY = 0x00000031
const CKR_DEVICE_REMOVED = 0x00000032
const CKR_ENCRYPTED_DATA_INVALID = 0x00000040
const CKR_ENCRYPTED_DATA_LEN_RANGE = 0x00000041
const CKR_FUNCTION_CANCELED = 0x00000050
const CKR_FUNCTION_NOT_PARALLEL = 0x00000051

const CKR_FUNCTION_NOT_SUPPORTED = 0x00000054

const CKR_KEY_HANDLE_INVALID = 0x00000060

const CKR_KEY_SIZE_RANGE = 0x00000062
const CKR_KEY_TYPE_INCONSISTENT = 0x00000063

const CKR_KEY_NOT_NEEDED = 0x00000064
const CKR_KEY_CHANGED = 0x00000065
const CKR_KEY_NEEDED = 0x00000066
const CKR_KEY_INDIGESTIBLE = 0x00000067
const CKR_KEY_FUNCTION_NOT_PERMITTED = 0x00000068
const CKR_KEY_NOT_WRAPPABLE = 0x00000069
const CKR_KEY_UNEXTRACTABLE = 0x0000006A

const CKR_MECHANISM_INVALID = 0x00000070
const CKR_MECHANISM_PARAM_INVALID = 0x00000071

const CKR_OBJECT_HANDLE_INVALID = 0x00000082
const CKR_OPERATION_ACTIVE = 0x00000090
const CKR_OPERATION_NOT_INITIALIZED = 0x00000091
const CKR_PIN_INCORRECT = 0x000000A0
const CKR_PIN_INVALID = 0x000000A1
const CKR_PIN_LEN_RANGE = 0x000000A2

const CKR_PIN_EXPIRED = 0x000000A3
const CKR_PIN_LOCKED = 0x000000A4

const CKR_SESSION_CLOSED = 0x000000B0
const CKR_SESSION_COUNT = 0x000000B1
const CKR_SESSION_HANDLE_INVALID = 0x000000B3
const CKR_SESSION_PARALLEL_NOT_SUPPORTED = 0x000000B4
const CKR_SESSION_READ_ONLY = 0x000000B5
const CKR_SESSION_EXISTS = 0x000000B6

const CKR_SESSION_READ_ONLY_EXISTS = 0x000000B7
const CKR_SESSION_READ_WRITE_SO_EXISTS = 0x000000B8

const CKR_SIGNATURE_INVALID = 0x000000C0
const CKR_SIGNATURE_LEN_RANGE = 0x000000C1
const CKR_TEMPLATE_INCOMPLETE = 0x000000D0
const CKR_TEMPLATE_INCONSISTENT = 0x000000D1
const CKR_TOKEN_NOT_PRESENT = 0x000000E0
const CKR_TOKEN_NOT_RECOGNIZED = 0x000000E1
const CKR_TOKEN_WRITE_PROTECTED = 0x000000E2
const CKR_UNWRAPPING_KEY_HANDLE_INVALID = 0x000000F0
const CKR_UNWRAPPING_KEY_SIZE_RANGE = 0x000000F1
const CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT = 0x000000F2
const CKR_USER_ALREADY_LOGGED_IN = 0x00000100
const CKR_USER_NOT_LOGGED_IN = 0x00000101
const CKR_USER_PIN_NOT_INITIALIZED = 0x00000102
const CKR_USER_TYPE_INVALID = 0x00000103

const CKR_USER_ANOTHER_ALREADY_LOGGED_IN = 0x00000104
const CKR_USER_TOO_MANY_TYPES = 0x00000105

const CKR_WRAPPED_KEY_INVALID = 0x00000110
const CKR_WRAPPED_KEY_LEN_RANGE = 0x00000112
const CKR_WRAPPING_KEY_HANDLE_INVALID = 0x00000113
const CKR_WRAPPING_KEY_SIZE_RANGE = 0x00000114
const CKR_WRAPPING_KEY_TYPE_INCONSISTENT = 0x00000115
const CKR_RANDOM_SEED_NOT_SUPPORTED = 0x00000120

const CKR_RANDOM_NO_RNG = 0x00000121

const CKR_DOMAIN_PARAMS_INVALID = 0x00000130

const CKR_CURVE_NOT_SUPPORTED = 0x00000140

const CKR_BUFFER_TOO_SMALL = 0x00000150
const CKR_SAVED_STATE_INVALID = 0x00000160
const CKR_INFORMATION_SENSITIVE = 0x00000170
const CKR_STATE_UNSAVEABLE = 0x00000180

const CKR_CRYPTOKI_NOT_INITIALIZED = 0x00000190
const CKR_CRYPTOKI_ALREADY_INITIALIZED = 0x00000191
const CKR_MUTEX_BAD = 0x000001A0
const CKR_MUTEX_NOT_LOCKED = 0x000001A1

const CKR_NEW_PIN_MODE = 0x000001B0
const CKR_NEXT_OTP = 0x000001B1

const CKR_EXCEEDED_MAX_ITERATIONS = 0x000001B5
const CKR_FIPS_SELF_TEST_FAILED = 0x000001B6
const CKR_LIBRARY_LOAD_FAILED = 0x000001B7
const CKR_PIN_TOO_WEAK = 0x000001B8
const CKR_PUBLIC_KEY_INVALID = 0x000001B9

const CKR_FUNCTION_REJECTED = 0x00000200

const CKR_VENDOR_DEFINED = 0x80000000

const CKS_RO_PUBLIC_SESSION = 0
const CKS_RO_USER_FUNCTIONS = 1
const CKS_RW_PUBLIC_SESSION = 2
const CKS_RW_USER_FUNCTIONS = 3
const CKS_RW_SO_FUNCTIONS = 4



type SwigcptrCK_SESSION_HANDLE_PTR uintptr
type CK_SESSION_HANDLE_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_SESSION_HANDLE_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_OBJECT_HANDLE_PTR uintptr
type CK_OBJECT_HANDLE_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_OBJECT_HANDLE_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_MECHANISM_TYPE uintptr
type CK_MECHANISM_TYPE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_MECHANISM_TYPE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_RV uintptr
type CK_RV interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_RV) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_UTF8CHAR_PTR uintptr
type CK_UTF8CHAR_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_UTF8CHAR_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_SESSION_HANDLE uintptr
type CK_SESSION_HANDLE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_SESSION_HANDLE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_ULONG uintptr
type CK_ULONG interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_ULONG) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_OBJECT_HANDLE uintptr
type CK_OBJECT_HANDLE interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_OBJECT_HANDLE) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_BYTE_PTR uintptr
type CK_BYTE_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_BYTE_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCK_ULONG_PTR uintptr
type CK_ULONG_PTR interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCK_ULONG_PTR) Swigcptr() uintptr {
	return uintptr(p)
}

